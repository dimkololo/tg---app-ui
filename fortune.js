// fortune.js v3.1 ‚Äî —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –≤ HTML, JS –µ—ë –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç
(function () {
  // --- –≠–õ–ï–ú–ï–ù–¢–´ ---
  const rotor =
    document.getElementById('wheelRotor') ||
    document.querySelector('.wheel-rotor') ||
    document.getElementById('wheelImg') ||
    document.querySelector('.wheel__img, .wheel-img');

  const numbersBox =
    document.getElementById('wheelNumbers') ||
    document.querySelector('.wheel__numbers');

  const timerEl = 
    document.getElementById('fortuneTimer');

  

  const btnSpin = document.getElementById('btnSpin') || document.querySelector('.btn-spin');
  const btnBack = document.getElementById('btnBack') || document.querySelector('.btn-back');
  const note = document.getElementById('spinNote');
  const pointer = document.querySelector('.wheel-pointer');
  

  if (!rotor || !btnSpin) {
    console.error('[fortune] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–µ—Å–æ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è.');
    return;
  }

  // --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ (–æ–≤–µ—Ä–ª–µ–π) ---
(function setupOrientationOverlay(){
  const lock = document.getElementById('orientationLock');
  if (!lock) return;

  const mq = window.matchMedia('(orientation: portrait)');

  const update = () => {
    const isPortrait = mq.matches || window.innerHeight >= window.innerWidth;
    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    lock.classList.toggle('is-active', !isPortrait);
    // –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø–æ–¥ –æ–≤–µ—Ä–ª–µ–µ–º
    document.documentElement.style.overflow = !isPortrait ? 'hidden' : '';
  };

  // –Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  update();

  // —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–º–µ–Ω—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —Ä–µ—Å–∞–π–∑ (—Ñ–æ–ª–±—ç–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö WebView)
  try { mq.addEventListener('change', update); } catch(_) { /* iOS < 13 */ }
  window.addEventListener('orientationchange', update);
  window.addEventListener('resize', update);
})();


  // --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
  const VALUES = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]; // 10 —Å–µ–∫—Ç–æ—Ä–æ–≤
  const SECTORS = VALUES.length; // 10
  const STEP = 360 / SECTORS;    // 36¬∞
  const SPIN_MS = 7000;          // 7 —Å–µ–∫—É–Ω–¥
  const STORAGE_SPUN = 'fortune_spun_session';         // —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: —Å–±—Ä–æ—Å –ø—Ä–∏ reload
  const STORAGE_ORDER = 'fortune_wheel_order_session'; // –ø–æ—Ä—è–¥–æ–∫ —á–∏—Å–µ–ª –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
  const BALANCE_KEY = 'plam_balance';
  const ANGLE_OFFSET = 0; // —Å–µ–∫—Ç–æ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–µ–ª–∫–∞ —Å–ø—Ä–∞–≤–∞ (3 —á–∞—Å–∞)
  //–†–ê–°–ö–û–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨ –í –ü–†–û–î–ï const STORAGE_CD_UNTIL = 'fortune_cd_until';      // –¥–µ–¥–ª–∞–π–Ω –∫—É–ª–¥–∞—É–Ω–∞ (ms, localStorage)
  const COOLDOWN_MS = 24 * 60 * 60 * 1000;          // 24 —á–∞—Å–∞

  // --- –¢–ï–°–¢–û–í–´–ô –°–ë–†–û–° –ü–†–ò –û–ë–ù–û–í–õ–ï–ù–ò–ò –°–¢–†–ê–ù–ò–¶–´ ---
  (() => {
    try {
      const nav = performance.getEntriesByType?.('navigation')?.[0];
      const isReload = nav ? nav.type === 'reload'
                           : (performance.navigation && performance.navigation.type === 1);
      if (isReload) {
        sessionStorage.removeItem(STORAGE_SPUN);
        sessionStorage.removeItem(STORAGE_ORDER);
      }
    } catch {}
  })();

  // --- –£–¢–ò–õ–ò–¢–´ ---
  const shuffle = (arr) => {
    const a = arr.slice();
    for (let i = a.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [a[i], a[j]] = [a[j], a[i]];
    }
    return a;
  };
  const getSessionJSON = (k, fallback = null) => {
    try {
      const raw = sessionStorage.getItem(k);
      return raw ? JSON.parse(raw) : fallback;
    } catch { return fallback; }
  };
  const setSessionJSON = (k, v) => sessionStorage.setItem(k, JSON.stringify(v));

  const getBalance = () => parseInt(localStorage.getItem(BALANCE_KEY) || '0', 10);
  const addToBalance = (delta) => {
    const next = getBalance() + delta;
    localStorage.setItem(BALANCE_KEY, String(next));
    return next;
  };

  const getCooldownUntil = () => parseInt(localStorage.getItem(STORAGE_CD_UNTIL) || '0', 10) || 0;
const setCooldownUntil = (ts) => localStorage.setItem(STORAGE_CD_UNTIL, String(ts));
const clearCooldown = () => localStorage.removeItem(STORAGE_CD_UNTIL);

const fmtLeft = (ms) => {
  const s = Math.max(0, Math.floor(ms / 1000));
  const h = Math.floor(s / 3600);
  const m = Math.floor((s % 3600) / 60);
  const ss = s % 60;
  const hh = String(h).padStart(2,'0');
  const mm = String(m).padStart(2,'0');
  const ss2 = String(ss).padStart(2,'0');
  return `${hh}—á. ${mm}–º–∏–Ω. ${ss2}—Å–µ–∫.`;
};

  // --- –ü–û–†–Ø–î–û–ö –ß–ò–°–ï–õ –ù–ê –ö–û–õ–ï–°–ï (—Å—Ç–∞–±–∏–ª–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏) ---
  let order = getSessionJSON(STORAGE_ORDER);
  if (!order || order.length !== SECTORS) {
    order = shuffle(VALUES);
    setSessionJSON(STORAGE_ORDER, order);
  }

  // --- –†–ï–ù–î–ï–† –¶–ò–§–† ---
  if (numbersBox) {
    numbersBox.innerHTML = '';
    for (let i = 0; i < SECTORS; i++) {
      const span = document.createElement('span');
      span.className = 'wheel__label';
      span.textContent = order[i];
      // —Å—Ç–∞–ª–æ ‚Äî –≤ —Ü–µ–Ω—Ç—Ä —Å–µ–∫—Ç–æ—Ä–∞
      const angle = ANGLE_OFFSET + i * STEP;
      span.style.setProperty('--a', angle + 'deg');
      numbersBox.appendChild(span);
    }
  }

  // --- –°–û–°–¢–û–Ø–ù–ò–ï –ö–ù–û–ü–ö–ò ---
  const markSpun = () => setCooldownUntil(Date.now() + COOLDOWN_MS);
  const isSpun = () => Date.now() < getCooldownUntil();

  const updateUI = () => {
    if (isSpun()) {
      btnSpin.setAttribute('disabled', 'true');
      startCooldownUI();
    } else {
      btnSpin.removeAttribute('disabled');
      stopCooldownUI();
       if (timerEl) timerEl.hidden = true; // —Ç–∞–π–º–µ—Ä –Ω–µ –≤–∏–¥–µ–Ω, –ø–æ–∫–∞ –Ω–µ –∫—Ä—É—Ç–∏–ª–∏/–∫–æ–≥–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
    }
  };
  updateUI();

  let cdTimerId = null;

function stopCooldownUI(){
  if (cdTimerId){ clearInterval(cdTimerId); cdTimerId = null; }
}

function startCooldownUI(){
  if (!timerEl) return;
  timerEl.hidden = false;
  stopCooldownUI();
  const tick = () => {
    const left = getCooldownUntil() - Date.now();
    if (left <= 0) {
      // –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ: —Å–∫—Ä—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
      stopCooldownUI();
      timerEl.hidden = true;
      clearCooldown();
      updateUI();
      return;
    }
    timerEl.textContent = fmtLeft(left);
  };
  tick();
  cdTimerId = setInterval(tick, 1000);
}


  // --- –õ–û–ì–ò–ö–ê –í–†–ê–©–ï–ù–ò–Ø ---
  let spinning = false;
  let currentTurns = 0;

  const spinOnce = () => {
    if (spinning || isSpun()) return;

    // –±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏–ª–∏ –∫–ª–∏–∫–∞–º–∏
    spinning = true;
    btnSpin.setAttribute('disabled', 'true');

    // üëâ –°—Ç—Ä–µ–ª–∫–∞ "wiggle" –≤ –ù–ê–ß–ê–õ–ï
  if (pointer) {
    pointer.classList.remove('wiggle'); // —Å–±—Ä–æ—Å, –µ—Å–ª–∏ –∫–ª–∞—Å—Å —É–∂–µ –±—ã–ª
    void pointer.offsetWidth;           // —Ä–µ—Ñ–ª–æ—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    pointer.classList.add('wiggle');    // –ø–æ–µ—Ö–∞–ª–∏
  }
    // –°–†–ê–ó–£ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
  markSpun();
  updateUI();

    const targetIndex = Math.floor(Math.random() * SECTORS);
    const prizePLAMc = order[targetIndex];

    const sectorCenterAngle = ANGLE_OFFSET + targetIndex * STEP;
    const baseRotations = 6; // 5‚Äì8 –Ω–∞ –≤–∫—É—Å
    currentTurns += baseRotations * 360 + (360 - (sectorCenterAngle % 360));

    rotor.style.transition = `transform ${SPIN_MS}ms cubic-bezier(0.12, 0.65, 0.06, 1)`;
    rotor.style.transform = `rotate(${currentTurns}deg)`;

    function showToast(text){
  const el = document.createElement('div');
  el.className = 'toast';
  el.textContent = text;
  document.body.appendChild(el);
  setTimeout(() => el.remove(), 2400);
}

    const onDone = () => {
      rotor.removeEventListener('transitionend', onDone);
      clearTimeout(safety);

       // –Ω–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
      const newBalance = addToBalance(prizePLAMc);

      // –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∫—Ä—É—Ç–∏–ª–æ—Å—å –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
      markSpun();

      spinning = false;
      updateUI();
       // –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
       // if (note) {
         // note.hidden = false;
          //note.textContent = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ +${prizePLAMc} PLAMc. –ë–∞–ª–∞–Ω—Å: ${newBalance} PLAMc.`;
       // }
      // —Ç–æ—Å—Ç
      showToast(`+${prizePLAMc} PLAMc`);
    
      // –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ onDone():
    sessionStorage.setItem('fortune_last_win', String(prizePLAMc)); // << –¥–ª—è –≥–ª–∞–≤–Ω–æ–π
    };
    

    rotor.addEventListener('transitionend', onDone, { once: true });
    const safety = setTimeout(onDone, SPIN_MS + 100); // —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
  };

  btnSpin.addEventListener('click', spinOnce);

  // --- ¬´–ù–∞–∑–∞–¥¬ª ---
  if (btnBack) {
    btnBack.addEventListener('click', () => {
      if (history.length > 1) history.back();
      else location.href = './index.html';
    });
  }
})();
