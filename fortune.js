// fortune.js v3 ‚Äî —É—Å—Ç–æ–π—á–∏–≤ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –∫–ª–∞—Å—Å–æ–≤/ID

(function () {
  // --- –≠–õ–ï–ú–ï–ù–¢–´ (–Ω–∞—Ö–æ–¥–∏–º –ø–æ ID –∏ —Å –∑–∞–ø–∞—Å–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏) ---
  const rotor =
    document.getElementById('wheelRotor') ||
    document.querySelector('.wheel-rotor') ||
    document.getElementById('wheelImg') ||
    document.querySelector('.wheel__img, .wheel-img');

  const numbersBox =
    document.getElementById('wheelNumbers') ||
    document.querySelector('.wheel__numbers');

  const btnSpin = document.getElementById('btnSpin') || document.querySelector('.btn-spin');
  const note = document.getElementById('spinNote') || document.querySelector('.fortune__note');
  const btnBack = document.getElementById('btnBack') || document.querySelector('.btn-back');

  if (!rotor || !btnSpin) {
    console.error('[fortune] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–µ—Å–æ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è.');
    return;
  }

  // --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
  const VALUES = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]; // 10 —Å–µ–∫—Ç–æ—Ä–æ–≤
  const SECTORS = VALUES.length; // 10
  const STEP = 360 / SECTORS;    // 36¬∞
  const SPIN_MS = 7000;          // 7 —Å–µ–∫—É–Ω–¥
  const STORAGE_SPUN = 'fortune_spun_session';   // –¥–ª—è —Ç–µ—Å—Ç–æ–≤ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ reload
  const STORAGE_ORDER = 'fortune_wheel_order_session'; // –ø–æ—Ä—è–¥–æ–∫ —á–∏—Å–µ–ª –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
  const BALANCE_KEY = 'plam_balance';

  // DEV: —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –∑–∞–ø—Ä–µ—Ç –Ω–∞ –∫—Ä—É—á–µ–Ω–∏–µ –ø—Ä–∏ reload —Å—Ç—Ä–∞–Ω–∏—Ü—ã
(() => {
  try {
    const nav = performance.getEntriesByType?.('navigation')?.[0];
    const isReload = nav ? nav.type === 'reload'
                         : (performance.navigation && performance.navigation.type === 1); // —Å—Ç–∞—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã
    if (isReload) {
      sessionStorage.removeItem('fortune_spun_session');      // —Å–Ω–æ–≤–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫—Ä—É—Ç–∏—Ç—å
      sessionStorage.removeItem('fortune_wheel_order_session'); // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–µ–∫—Ç–æ—Ä–∞ –∑–∞–Ω–æ–≤–æ
    }
  } catch {}
})();


  // –ï—Å–ª–∏ —Ü–µ–Ω—Ç—Ä —Å–µ–∫—Ç–æ—Ä–∞ –Ω–∞ 3 —á–∞—Å–∞ (—Å—Ç—Ä–µ–ª–∫–∞ —Å–ø—Ä–∞–≤–∞), –æ–±—ã—á–Ω–æ –æ—Ñ—Ñ—Å–µ—Ç = 0.
  // –ï—Å–ª–∏ —É–≤–∏–¥–∏—à—å —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–∞—Ö –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É —Å–µ–∫—Ç–æ—Ä–∞ ‚Äî –ø–æ–¥—Å—Ç—Ä–æ–π –Ω–∞ ¬±18.
  const ANGLE_OFFSET = 0; // –≥—Ä–∞–¥—É—Å–æ–≤

  // --- –£–¢–ò–õ–ò–¢–´ ---
  const shuffle = (arr) => {
    const a = arr.slice();
    for (let i = a.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [a[i], a[j]] = [a[j], a[i]];
    }
    return a;
  };

  const getSessionJSON = (k, fallback = null) => {
    try {
      const raw = sessionStorage.getItem(k);
      return raw ? JSON.parse(raw) : fallback;
    } catch { return fallback; }
  };
  const setSessionJSON = (k, v) => sessionStorage.setItem(k, JSON.stringify(v));

  const getBalance = () => parseInt(localStorage.getItem(BALANCE_KEY) || '0', 10);
  const addToBalance = (delta) => {
    const next = getBalance() + delta;
    localStorage.setItem(BALANCE_KEY, String(next));
    return next;
  };

  // --- –ü–û–†–Ø–î–û–ö –ß–ò–°–ï–õ –ù–ê –ö–û–õ–ï–°–ï (—Å—Ç–∞–±–∏–ª–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏) ---
  let order = getSessionJSON(STORAGE_ORDER);
  if (!order || order.length !== SECTORS) {
    order = shuffle(VALUES);
    setSessionJSON(STORAGE_ORDER, order);
  }

  // --- –†–ï–ù–î–ï–† –¶–ò–§–† ---
  if (numbersBox) {
    numbersBox.innerHTML = '';
    // –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º 10 –º–µ—Ç–æ–∫ –ø–æ –∫—Ä—É–≥—É, –Ω–∞—á–∏–Ω–∞—è —Å–æ ¬´—Å—Ç—Ä–µ–ª–∫–∏¬ª –Ω–∞ 3 —á–∞—Å–∞.
    for (let i = 0; i < SECTORS; i++) {
      const span = document.createElement('span');
      span.className = 'wheel__label';
      span.textContent = order[i];
      // —É–≥–æ–ª –æ—Ç –æ—Å–∏ X (–≤–ø—Ä–∞–≤–æ), –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ
      const angle = ANGLE_OFFSET + i * STEP;
      span.style.setProperty('--a', angle + 'deg');
      numbersBox.appendChild(span);
    }
  }

  // --- –°–û–°–¢–û–Ø–ù–ò–ï –ö–ù–û–ü–ö–ò (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ reload) ---
  const markSpun = () => sessionStorage.setItem(STORAGE_SPUN, '1');
  const isSpun = () => sessionStorage.getItem(STORAGE_SPUN) === '1';

  const updateUI = () => {
    if (!note) return;
    if (isSpun()) {
      btnSpin.setAttribute('disabled', 'true');
      note.hidden = false;
      note.textContent = '–ú–æ–∂–Ω–æ –∫—Ä—É—Ç–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ (—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∞).';
    } else {
      btnSpin.removeAttribute('disabled');
      note.hidden = true;
      note.textContent = '';
    }
  };

  updateUI();

  // --- –õ–û–ì–ò–ö–ê –í–†–ê–©–ï–ù–ò–Ø ---
  let spinning = false;
  let currentTurns = 0; // –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —É–≥–æ–ª (–¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ ‚Äî —Ç—É—Ç –æ–¥–∏–Ω —Ä–∞–∑)

  const spinOnce = () => {
    if (spinning || isSpun()) return;

    // üîí —Å—Ä–∞–∑—É –±–ª–æ–∫–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏–ª–∏
    spinning = true;
    btnSpin.setAttribute('disabled', 'true');

    // –°–ª—É—á–∞–π–Ω—ã–π —Å–µ–∫—Ç–æ—Ä
    const targetIndex = Math.floor(Math.random() * SECTORS);
    const prizePLAMc = order[targetIndex];

    // –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—Ä –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–¥ —Å—Ç—Ä–µ–ª–∫–æ–π —Å–ø—Ä–∞–≤–∞ (0¬∞),
    // –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–Ω—É—Ç—å –∫–æ–ª–µ—Å–æ –Ω–∞ (360 - —É–≥–æ–ª —Ü–µ–Ω—Ç—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞) + N*360
    const sectorCenterAngle = ANGLE_OFFSET + targetIndex * STEP; // –≥–¥–µ —Å–µ–π—á–∞—Å —Ü–µ–Ω—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
    const baseRotations = 6; // –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ (–º–æ–∂–µ—à—å 5‚Äì8 —Å–¥–µ–ª–∞—Ç—å)
    currentTurns += baseRotations * 360 + (360 - (sectorCenterAngle % 360));

    // –ü–ª–∞–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
    rotor.style.transition = `transform ${SPIN_MS}ms cubic-bezier(0.12, 0.65, 0.06, 1)`;
    rotor.style.transform = `rotate(${currentTurns}deg)`;

    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ + –ø–æ–º–µ—Ç–∫–∏
    const onDone = () => {
      rotor.removeEventListener('transitionend', onDone);
      // safety —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ transitionend –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
      clearTimeout(safety);
      // –ó–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
      const newBalance = addToBalance(prizePLAMc);

      // –ü–æ–º–µ—á–∞–µ–º ¬´–∫—Ä—É—Ç–∏–ª–∏¬ª (–Ω–∞ —Å–µ—Å—Å–∏—é)
      markSpun();

      // –°–æ–æ–±—â–µ–Ω–∏–µ
      if (note) {
        note.hidden = false;
        note.textContent = `+${prizePLAMc} PLAMc! –í–∞—à –±–∞–ª–∞–Ω—Å: ${newBalance} PLAMc.`;
      }

      spinning = false;
      updateUI();
    };

    rotor.addEventListener('transitionend', onDone, { once: true });
    const safety = setTimeout(onDone, SPIN_MS + 100); // —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
  };

  btnSpin.addEventListener('click', spinOnce);

  // --- ¬´–ù–∞–∑–∞–¥¬ª ---
  if (btnBack) {
    btnBack.addEventListener('click', () => {
      if (history.length > 1) history.back();
      else location.href = './index.html';
    });
  }
})();
